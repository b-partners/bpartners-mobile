name: deploy
on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: 'env'
        options:
          - dev
          - preprod
          - prod
        required: true
      versionCode:
        type: number
        default: 1

env:
  NODE_OPTIONS: '--max_old_space_size=8192'

jobs:
  android-browserstack:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - run: npm install --force

      - name: Decode keystore
        run: |
          cd android/app
          touch release.keystore
          echo "${{ secrets.KEYSTORE }}" | base64 -d >> release.keystore
        if: github.event.inputs.env == 'preprod' || github.event.inputs.env == 'prod'

      - run: echo "sha=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Setting up the versionCode and versionName
        run: |
          sed -i 's/versionCode 1/versionCode ${{ github.event.inputs.versionCode }}/g' android/app/build.gradle
          sed -i 's/versionName "1.0"/versionName "${{ github.event.inputs.env}}-${{ env.sha }}"/g' android/app/build.gradle

      - name: Setting up the environment variables
        run: |
          mkdir ~/.gradle
          sh ./setEnvironmentVariables.sh ${{ secrets.APP_UPLOAD_STORE_FILE }} ${{ secrets.APP_UPLOAD_STORE_PASSWORD }} ${{ secrets.APP_UPLOAD_KEY_ALIAS }} ${{ secrets.APP_UPLOAD_KEY_PASSWORD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - run: npm run build-android

      - name: Remove duplicated ressources
        run: |
          rm -rf /home/runner/work/bpartners-mobile/bpartners-mobile/android/app/src/main/res/drawable-*
          rm -rf /home/runner/work/bpartners-mobile/bpartners-mobile/android/app/src/main/res/raw

      - name: Retrieve the environment variables from aws and put them in .env
        run: |
          echo API_URL=$(aws ssm get-parameters --names "/bpartners/mobile/${{ github.event.inputs.env }}/API_URL" --with-decryption --output text --query "Parameters[*].Value") > .env
          echo SCHEME=$(aws ssm get-parameters --names "/bpartners/mobile/${{ github.event.inputs.env }}/SCHEME" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo SUCCESS_URL=$(aws ssm get-parameters --names "/bpartners/mobile/${{ github.event.inputs.env }}/SUCCESS_URL" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo FAILURE_URL=$(aws ssm get-parameters --names "/bpartners/mobile/${{ github.event.inputs.env }}/FAILURE_URL" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo SWAN_URL=$(aws ssm get-parameters --names "/bpartners/mobile/SWAN_URL" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo CLIENT_ID=$(aws ssm get-parameters --names "/bpartners/mobile/${{ github.event.inputs.env }}/SWAN_CLIENT_ID" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo CLIENT_SECRET=$(aws ssm get-parameters --names "/bpartners/mobile/${{ github.event.inputs.env }}/SWAN_CLIENT_SECRET" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo SENTRY_ENV=$(aws ssm get-parameters --names "/bpartners/mobile/${{ github.event.inputs.env }}/SENTRY_ENV" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo SENTRY_DSN=$(aws ssm get-parameters --names "/bpartners/mobile/SENTRY_DSN" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo AUTHORIZATION_ENDPOINT=$(aws ssm get-parameters --names "/bpartners/mobile/AUTHORIZATION_ENDPOINT" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo TOKEN_ENDPOINT=$(aws ssm get-parameters --names "/bpartners/mobile/TOKEN_ENDPOINT" --with-decryption --output text --query "Parameters[*].Value") >> .env
          echo ACCESS_KEY_ID= ${{ secrets.ACCESS_KEY_ID }} >> .env
          echo REGION= ${{ secrets.REGION }} >> .env
          echo SECRET_ACCESS_KEY = ${{ secrets.SECRET_ACCESS_KEY }} >> .env

      - name: Build apk and bundle
        run: |
          if ${{ github.event.inputs.env == 'dev'}}; then
            cd android
            ./gradlew assembleDebug && ./gradlew bundleDebug
            cd ..
            mv android/app/build/outputs/bundle/debug/app-debug.aab android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.aab
            mv android/app/build/outputs/apk/debug/app-debug.apk android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.apk

          elif ${{ github.event.inputs.env == 'preprod'}}; then
            cd android
            ./gradlew assemblePreprod && ./gradlew bundlePreprod
            cd ..
            mv android/app/build/outputs/bundle/preprod/app-preprod.aab android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.aab
            mv android/app/build/outputs/apk/preprod/app-preprod.apk android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.apk 

          elif ${{ github.event.inputs.env == 'prod'}}; then
            cd android
            # TODO: release is broken and that's why we use preprod scripts
            ./gradlew assemblePreprod && ./gradlew bundlePreprod
            cd ..
            mv android/app/build/outputs/bundle/preprod/app-preprod.aab android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.aab
            mv android/app/build/outputs/apk/preprod/app-preprod.apk android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.apk
          fi

      - name: Deploy to browserstack
        run: |
          curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESSKEY }}" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.apk"
          curl -u "${{ secrets.BROWSERSTACK_USERNAME }}:${{ secrets.BROWSERSTACK_ACCESSKEY }}" -X POST "https://api-cloud.browserstack.com/app-live/upload" -F "file=@android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.aab"

      - name: Deploy bundle and apk to S3
        run: |
          aws s3 cp android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.apk s3://mobile-bpartners/android/
          aws s3 cp android/app/build/outputs/${{ github.event.inputs.env }}-${{ env.sha }}.aab s3://mobile-bpartners/android/
